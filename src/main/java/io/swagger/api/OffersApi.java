/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Offer;
import io.swagger.model.Offers;
import io.swagger.model.PurInfo;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-04-04T16:16:25.467Z[GMT]")
@Validated
public interface OffersApi {

    @Operation(summary = "Add an offer", description = "", security = {
        @SecurityRequirement(name = "recstore_auth", scopes = {
            "write:content"        })    }, tags={ "offers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Edited"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/offers",
        consumes = { "aplication/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addOffer(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Offer body);


    @Operation(summary = "Get information about buying", description = "", tags={ "offers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = PurInfo.class))) })
    @RequestMapping(value = "/offers/info",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PurInfo> getBuyingInfo();


    @Operation(summary = "Get product by path", description = "", tags={ "offers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Offer.class))),
        
        @ApiResponse(responseCode = "404", description = "Offer not found") })
    @RequestMapping(value = "/offers/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Offer> getOfferByPath(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "List offers", description = "", tags={ "offers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Offers.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found") })
    @RequestMapping(value = "/offers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Offers> getOffers(@Parameter(in = ParameterIn.QUERY, description = "Offset list of offers" ,schema=@Schema()) @Valid @RequestParam(value = "offset", required = false) Integer offset, @Parameter(in = ParameterIn.QUERY, description = "Limit list of offers" ,schema=@Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @Operation(summary = "Edit info about buying", description = "", security = {
        @SecurityRequirement(name = "recstore_auth", scopes = {
            "write:content"        })    }, tags={ "offers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Edited"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/offers/info",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> updateBuyingInfo(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody PurInfo body);


    @Operation(summary = "Edit an offer", description = "", security = {
        @SecurityRequirement(name = "recstore_auth", scopes = {
            "write:content"        })    }, tags={ "offers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Edited"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "404", description = "Offer not found") })
    @RequestMapping(value = "/offers/{id}",
        consumes = { "aplication/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> updateOfferByPath(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Offer body);

}

